# vim:ts=2:sw=2:et
# --------------------------------------------------------------------------
#   Prefixes used in order to keep CircleCI workflow overview more readable:
#     - b: build
#     - t: test
#     - ubu: ubuntu
#     - ems: Emscripten
version: 2.1
parameters:
  ubuntu-1804-docker-image:
    type: string
    # solbuildpackpusher/solidity-buildpack-deps:ubuntu1804-3
    default: "solbuildpackpusher/solidity-buildpack-deps@sha256:19f613d2ac47fedff654dacef984d8a64726c4d67ae8f2667a85ee7d97ac4c1c"
  ubuntu-2004-docker-image:
    type: string
    # solbuildpackpusher/solidity-buildpack-deps:ubuntu2004-3
    default: "solbuildpackpusher/solidity-buildpack-deps@sha256:aeedbe7390a7383815f0cf0f8a1b8bf84dc5e334a3b0043ebcdf8b1bdbe80a81"
  ubuntu-2004-clang-docker-image:
    type: string
    # solbuildpackpusher/solidity-buildpack-deps:ubuntu2004.clang-3
    default: "solbuildpackpusher/solidity-buildpack-deps@sha256:2593c15689dee5b5bdfff96a36c8c68a468cd3b147c41f75b820b8fabc257be9"
  ubuntu-1604-clang-ossfuzz-docker-image:
    type: string
    # solbuildpackpusher/solidity-buildpack-deps:ubuntu1604.clang.ossfuzz-4
    default: "solbuildpackpusher/solidity-buildpack-deps@sha256:842126b164b3542f05bff2611459e21edc7e3e2c81ca9d1f43396c8cf066f7ca"
  emscripten-docker-image:
    type: string
    default: "solbuildpackpusher/solidity-buildpack-deps@sha256:23dad3b34deae8107c8551804ef299f6a89c23ed506e8118fac151e2bdc9018c"

defaults:

  # --------------------------------------------------------------------------
  # Build Templates

  - setup_prerelease_commit_hash: &setup_prerelease_commit_hash
      name: Store commit hash and prerelease
      command: |
        if [ "$CIRCLE_BRANCH" = release -o -n "$CIRCLE_TAG" ]; then echo -n > prerelease.txt; else date -u +"nightly.%Y.%-m.%-d" > prerelease.txt; fi
        echo -n "$CIRCLE_SHA1" > commit_hash.txt

  - run_build: &run_build
      name: Build
      command: scripts/ci/build.sh

  - run_build_ossfuzz: &run_build_ossfuzz
      name: Build_ossfuzz
      command: scripts/ci/build_ossfuzz.sh

  - run_proofs: &run_proofs
      name: Correctness proofs for optimization rules
      command: scripts/run_proofs.sh

  # --------------------------------------------------------------------------
  # Artifacts Templates

  # the whole build directory
  - artifacts_build_dir: &artifacts_build_dir
      root: build
      paths:
        - "*"

  # compiled solc executable target
  - artifacts_solc: &artifacts_solc
      path: build/solc/solc
      destination: solc

  # compiled tool executable target
  - artifacts_tools: &artifacts_tools
      path: build/tools/solidity-upgrade
      destination: solidity-upgrade

  # compiled executable targets
  - artifacts_executables: &artifacts_executables
      root: build
      paths:
        - solc/solc
        - test/soltest
        - test/tools/solfuzzer

  # compiled OSSFUZZ targets
  - artifacts_executables_ossfuzz: &artifacts_executables_ossfuzz
      root: build
      paths:
        - test/tools/ossfuzz/abiv2_proto_ossfuzz
        - test/tools/ossfuzz/const_opt_ossfuzz
        - test/tools/ossfuzz/solc_noopt_ossfuzz
        - test/tools/ossfuzz/solc_opt_ossfuzz
        - test/tools/ossfuzz/strictasm_assembly_ossfuzz
        - test/tools/ossfuzz/strictasm_diff_ossfuzz
        - test/tools/ossfuzz/strictasm_opt_ossfuzz
        - test/tools/ossfuzz/yul_proto_diff_ossfuzz
        - test/tools/ossfuzz/yul_proto_diff_custom_mutate_ossfuzz
        - test/tools/ossfuzz/yul_proto_ossfuzz
        - test/tools/ossfuzz/sol_proto_ossfuzz

  # test result output directory
  - artifacts_test_results: &artifacts_test_results
      path: test_results/
      destination: test_results/

  # --------------------------------------------------------------------------
  # Tests Templates

  # store_test_results helper
  - store_test_results: &store_test_results
      path: test_results/

  - run_soltest: &run_soltest
      name: soltest
      no_output_timeout: 30m
      command: ./.circleci/soltest.sh

  - run_soltest_all: &run_soltest_all
      name: soltest_all
      no_output_timeout: 30m
      command: ./.circleci/soltest_all.sh

  - run_cmdline_tests: &run_cmdline_tests
      name: command line tests
      no_output_timeout: 30m
      command: ./test/cmdlineTests.sh

  - run_docs_pragma_min_version: &run_docs_pragma_min_version
      name: docs pragma version check
      command: ./scripts/docs_version_pragma_check.sh

  - test_ubuntu1604_clang: &test_ubuntu1604_clang
      docker:
        - image: << pipeline.parameters.ubuntu-1604-clang-ossfuzz-docker-image >>
      steps:
        - checkout
        - attach_workspace:
            at: build
        - run: *run_soltest
        - store_test_results: *store_test_results
        - store_artifacts: *artifacts_test_results

  - test_ubuntu2004_clang: &test_ubuntu2004_clang
      docker:
        - image: << pipeline.parameters.ubuntu-2004-clang-docker-image >>
      steps:
        - checkout
        - attach_workspace:
            at: build
        - run: *run_soltest
        - store_test_results: *store_test_results
        - store_artifacts: *artifacts_test_results

  - test_ubuntu2004: &test_ubuntu2004
      docker:
        - image: << pipeline.parameters.ubuntu-2004-docker-image >>
      parallelism: 6
      steps:
        - checkout
        - attach_workspace:
            at: build
        - run: *run_soltest_all
        - store_test_results: *store_test_results
        - store_artifacts: *artifacts_test_results

  - test_asan: &test_asan
      <<: *test_ubuntu2004
      steps:
      - checkout
      - attach_workspace:
          at: build
      - run:
          <<: *run_soltest
      - store_test_results: *store_test_results
      - store_artifacts: *artifacts_test_results

  - test_asan_clang: &test_asan_clang
      <<: *test_ubuntu2004_clang
      steps:
      - checkout
      - attach_workspace:
          at: build
      - run:
          <<: *run_soltest
      - store_test_results: *store_test_results
      - store_artifacts: *artifacts_test_results

  # --------------------------------------------------------------------------
  # Workflow Templates

  - workflow_trigger_on_tags: &workflow_trigger_on_tags
      filters:
        tags:
          only: /.*/

  - workflow_ubuntu2004: &workflow_ubuntu2004
      <<: *workflow_trigger_on_tags
      requires:
        - b_ubu

  - workflow_ubuntu1604_clang: &workflow_ubuntu1604_clang
      <<: *workflow_trigger_on_tags
      requires:
        - b_ubu_ossfuzz

  - workflow_ubuntu2004_clang: &workflow_ubuntu2004_clang
      <<: *workflow_trigger_on_tags
      requires:
        - b_ubu_clang

  - workflow_ubuntu2004_release: &workflow_ubuntu2004_release
      <<: *workflow_trigger_on_tags
      requires:
        - b_ubu_release

  - workflow_archlinux: &workflow_archlinux
      <<: *workflow_trigger_on_tags
      requires:
        - b_archlinux

  - workflow_ubuntu2004_codecov: &workflow_ubuntu2004_codecov
      <<: *workflow_trigger_on_tags
      requires:
        - b_ubu_codecov

  - workflow_osx: &workflow_osx
      <<: *workflow_trigger_on_tags
      requires:
        - b_osx

  - workflow_ubuntu2004_asan: &workflow_ubuntu2004_asan
      <<: *workflow_trigger_on_tags
      requires:
        - b_ubu_asan

  - workflow_ubuntu2004_asan_clang: &workflow_ubuntu2004_asan_clang
      <<: *workflow_trigger_on_tags
      requires:
        - b_ubu_asan_clang

  - workflow_emscripten: &workflow_emscripten
      <<: *workflow_trigger_on_tags
      requires:
        - b_ems

  - workflow_ubuntu1604_ossfuzz: &workflow_ubuntu1604_ossfuzz
      <<: *workflow_trigger_on_tags
      requires:
        - b_ubu_ossfuzz

  # --------------------------------------------------------------------------
  # Notification Templates
  - gitter_notify_failure: &gitter_notify_failure
      name: Gitter notify failure
      command: >-
        curl -X POST -i
        -i -H "Content-Type: application/json"
        -H "Accept: application/json"
        -H "Authorization: Bearer $GITTER_API_TOKEN" "https://api.gitter.im/v1/rooms/$GITTER_NOTIFY_ROOM_ID/chatMessages"
        -d '{"text":" ❌ Nightly job **'$CIRCLE_JOB'** failed on **'$CIRCLE_BRANCH'**. Please see '$CIRCLE_BUILD_URL' for details."}'
      when: on_fail

  - gitter_notify_success: &gitter_notify_success
      name: Gitter notify success
      command: >-
        curl -X POST -i
        -i -H "Content-Type: application/json"
        -H "Accept: application/json"
        -H "Authorization: Bearer $GITTER_API_TOKEN" "https://api.gitter.im/v1/rooms/$GITTER_NOTIFY_ROOM_ID/chatMessages"
        -d '{"text":" ✅ Nightly job **'$CIRCLE_JOB'** succeeded on **'$CIRCLE_BRANCH'**. Please see '$CIRCLE_BUILD_URL' for details."}'
      when: on_success

# -----------------------------------------------------------------------------------------------
jobs:

  chk_spelling:
    docker:
      - image: circleci/python:3.6
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run:
          name: Install dependencies
          command: |
            pip install --user codespell
      - run:
          name: Check spelling
          command: ~/.local/bin/codespell -S "*.enc,.git,Dockerfile*" -I ./scripts/codespell_whitelist.txt

  chk_docs_examples:
    docker:
      - image: circleci/node
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run:
          name: JS deps
          command: sudo npm install -g solhint
      - run:
          name: Test Docs examples
          command: ./test/docsCodeStyle.sh

  chk_coding_style:
    docker:
      - image: buildpack-deps:focal
    steps:
      - checkout
      - run:
          name: Install shellcheck
          command: apt -q update && apt install -y shellcheck
      - run:
          name: Check for C++ coding style
          command: ./scripts/check_style.sh
      - run:
          name: checking shell scripts
          command: ./scripts/chk_shellscripts/chk_shellscripts.sh

  chk_errorcodes:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run:
          name: Check for error codes
          command: ./scripts/error_codes.py --check

  chk_pylint:
    docker:
      - image: buildpack-deps:eoan
    steps:
      - checkout
      - run:
          name: Install pip
          command: apt -q update && apt install -y python3-pip
      - run:
          name: Install pylint
          command: python3 -m pip install pylint z3-solver pygments-lexer-solidity
          # also z3-solver to make sure pylint knows about this module, pygments-lexer-solidity for docs
      - run:
          name: Linting Python Scripts
          command: ./scripts/pylint_all.py

  chk_antlr_grammar:
    docker:
      - image: buildpack-deps:eoan
    steps:
      - checkout
      - run:
          name: Install Java
          command: apt -q update && apt install -y openjdk-14-jdk
      - run:
          name: Run tests
          command: ./scripts/test_antlr_grammar.sh

  chk_buglist:
    docker:
      - image: circleci/node
    environment:
      TERM: xterm
    steps:
      - checkout
      - run:
          name: JS deps
          command: |
            npm install download
            npm install JSONPath
            npm install mktemp
      - run:
          name: Test buglist
          command: ./test/buglistTests.js

  chk_proofs:
    docker:
      - image: buildpack-deps:latest
    environment:
      TERM: xterm
    steps:
      - checkout
      - run:
          name: Z3 python deps
          command: |
            apt-get -qq update
            apt-get -qy install python3-pip
            pip3 install --user z3-solver
      - run: *run_proofs

  chk_docs_pragma_min_version:
    docker:
      - image: << pipeline.parameters.ubuntu-2004-docker-image >>
    environment:
      TERM: xterm
    steps:
      - checkout
      - run: *run_docs_pragma_min_version

  b_ubu_clang: &build_ubuntu2004_clang
    resource_class: xlarge
    docker:
      - image: << pipeline.parameters.ubuntu-2004-clang-docker-image >>
    environment:
      CC: clang
      CXX: clang++
      MAKEFLAGS: -j 10
    steps:
      - checkout
      - run: *run_build
      - store_artifacts: *artifacts_solc
      - persist_to_workspace: *artifacts_executables


  b_ubu_asan_clang: &build_ubuntu2004_clang
    docker:
      - image: << pipeline.parameters.ubuntu-2004-clang-docker-image >>
    environment:
      CC: clang
      CXX: clang++
      CMAKE_OPTIONS: -DSANITIZE=address
      MAKEFLAGS: -j 3
    steps:
      - checkout
      - run: *run_build
      - store_artifacts: *artifacts_solc
      - persist_to_workspace: *artifacts_executables

  b_ubu: &build_ubuntu2004
    resource_class: xlarge
    docker:
      - image: << pipeline.parameters.ubuntu-2004-docker-image >>
    environment:
      MAKEFLAGS: -j 10
    steps:
      - checkout
      - run: *run_build
      - store_artifacts: *artifacts_solc
      - store_artifacts: *artifacts_tools
      - persist_to_workspace: *artifacts_executables

  b_ubu_release: &build_ubuntu2004_release
    <<: *build_ubuntu2004
    environment:
      FORCE_RELEASE: ON
      MAKEFLAGS: -j 10

  b_ubu18: &build_ubuntu1804
    docker:
      - image: << pipeline.parameters.ubuntu-1804-docker-image >>
    environment:
      CMAKE_OPTIONS: -DCMAKE_CXX_FLAGS=-O2
      CMAKE_BUILD_TYPE: RelWithDebugInfo
      MAKEFLAGS: -j 3
    steps:
      - checkout
      - run: *run_build
      - store_artifacts: *artifacts_solc
      - persist_to_workspace: *artifacts_executables

  b_ubu_codecov:
    <<: *build_ubuntu2004
    environment:
      COVERAGE: ON
      CMAKE_BUILD_TYPE: Debug
      MAKEFLAGS: -j 10
    steps:
      - checkout
      - run: *run_build
      - persist_to_workspace: *artifacts_build_dir

  t_ubu_codecov:
    <<: *test_ubuntu2004
    environment:
      EVM: constantinople
      OPTIMIZE: 1
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run:
          name: "soltest: Syntax Tests"
          command: build/test/soltest -t 'syntaxTest*' -- --testpath test
      - run:
          name: "Code Coverage: Syntax Tests"
          command: codecov --flags syntax --gcov-root build
      - run: *run_soltest
      - run:
          name: "Coverage: All"
          command: codecov --flags all --gcov-root build
      - store_artifacts: *artifacts_test_results

  # Builds in C++20 mode and uses debug build in order to speed up.
  # Do *NOT* store any artifacts or workspace as we don't run tests on this build.
  b_ubu_cxx20:
    <<: *build_ubuntu2004
    environment:
      CMAKE_BUILD_TYPE: Debug
      CMAKE_OPTIONS: -DCMAKE_CXX_STANDARD=20 -DUSE_CVC4=OFF
      MAKEFLAGS: -j 10
    steps:
      - checkout
      - run: *run_build

  b_ubu_ossfuzz: &build_ubuntu1604_clang
    docker:
      - image: << pipeline.parameters.ubuntu-1604-clang-ossfuzz-docker-image >>
    environment:
      CC: clang
      CXX: clang++
      TERM: xterm
      MAKEFLAGS: -j 3
    steps:
      - checkout
      - run: *setup_prerelease_commit_hash
      - run: *run_build_ossfuzz
      - persist_to_workspace: *artifacts_executables_ossfuzz

  t_ubu_ossfuzz: &t_ubu_ossfuzz
    <<: *test_ubuntu1604_clang
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run:
          name: Regression tests
          command: |
            git clone https://github.com/ethereum/solidity-fuzzing-corpus /tmp/solidity-fuzzing-corpus
            mkdir -p test_results
            scripts/regressions.py -o test_results
      - run: *gitter_notify_failure
      - run: *gitter_notify_success
      - store_test_results: *store_test_results
      - store_artifacts: *artifacts_test_results

  b_archlinux:
    docker:
      - image: archlinux/base
    environment:
      TERM: xterm
      MAKEFLAGS: -j 3
    steps:
      - run:
          name: Install build dependencies
          command: |
            pacman --noconfirm -Syu --noprogressbar --needed base-devel boost cmake z3 cvc4 git openssh tar
      - checkout
      - run: *run_build
      - store_artifacts: *artifacts_solc
      - persist_to_workspace: *artifacts_executables

  b_osx:
    macos:
      xcode: "11.0.0"
    environment:
      TERM: xterm
      CMAKE_BUILD_TYPE: Release
      MAKEFLAGS: -j 5
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-osx-{{ .Branch }}-{{ checksum ".circleci/config.yml" }}-{{ checksum ".circleci/osx_install_dependencies.sh" }}
      - run:
          name: Install build dependencies
          command: ./.circleci/osx_install_dependencies.sh
      - save_cache:
          key: dependencies-osx-{{ .Branch }}-{{ checksum ".circleci/config.yml" }}-{{ checksum ".circleci/osx_install_dependencies.sh" }}
          paths:
            - /usr/local/bin
            - /usr/local/sbin
            - /usr/local/lib
            - /usr/local/include
            - /usr/local/Cellar
            - /usr/local/Homebrew
      - run: *run_build
      - store_artifacts: *artifacts_solc
      - store_artifacts: *artifacts_tools
      - persist_to_workspace: *artifacts_build_dir

  t_osx_soltest:
    macos:
      xcode: "11.0.0"
    environment:
      EVM: constantinople
      OPTIMIZE: 0
      TERM: xterm
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-osx-{{ .Branch }}-{{ checksum ".circleci/config.yml" }}-{{ checksum ".circleci/osx_install_dependencies.sh" }}
      - attach_workspace:
          at: build
      - run: *run_soltest
      - store_test_results: *store_test_results
      - store_artifacts: *artifacts_test_results

  t_osx_cli:
    macos:
      xcode: "11.0.0"
    environment:
      TERM: xterm
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-osx-{{ .Branch }}-{{ checksum ".circleci/config.yml" }}-{{ checksum ".circleci/osx_install_dependencies.sh" }}
      - attach_workspace:
          at: build
      - run: *run_cmdline_tests
      - store_artifacts: *artifacts_test_results

  b_ems:
    resource_class: xlarge
    docker:
      - image: << pipeline.parameters.emscripten-docker-image >>
    environment:
      MAKEFLAGS: -j 10
      TERM: xterm
    steps:
      - checkout
      - run:
          name: Build
          command: |
            scripts/travis-emscripten/build_emscripten.sh
      - store_artifacts:
          path: emscripten_build/libsolc/soljson.js
          destination: soljson.js
      - run: mkdir -p workspace
      - run: cp emscripten_build/libsolc/soljson.js workspace/soljson.js
      - run: scripts/get_version.sh > workspace/version.txt
      - persist_to_workspace:
          root: workspace
          paths:
            - soljson.js
            - version.txt

  # x64 ASAN build, for testing for memory related bugs
  b_ubu_asan: &b_ubu_asan
    <<: *build_ubuntu2004
    environment:
      CMAKE_OPTIONS: -DSANITIZE=address
      MAKEFLAGS: -j 10
      CMAKE_BUILD_TYPE: Release
    steps:
      - checkout
      - run: *run_build
      - store_artifacts: *artifacts_solc
      - persist_to_workspace: *artifacts_executables

  b_docs:
    docker:
      - image: << pipeline.parameters.ubuntu-2004-docker-image >>
    steps:
      - checkout
      - run: *setup_prerelease_commit_hash
      - run:
          name: Build documentation
          command: ./scripts/docs.sh
      - store_artifacts:
          path: docs/_build/html/
          destination: docs-html

  t_ubu_soltest: &t_ubu_soltest
    <<: *test_ubuntu2004

  t_archlinux_soltest: &t_archlinux_soltest
      docker:
        - image: archlinux/base
      environment:
        EVM: constantinople
        OPTIMIZE: 0
        TERM: xterm
      steps:
        - run:
            name: Install runtime dependencies
            command: |
              pacman --noconfirm -Syu --noprogressbar --needed base-devel boost cmake z3 cvc4 git openssh tar
        - checkout
        - attach_workspace:
            at: build
        - run: *run_soltest
        - store_test_results: *store_test_results
        - store_artifacts: *artifacts_test_results

  t_ubu_soltest_enforce_yul: &t_ubu_soltest_enforce_yul
    docker:
      - image: << pipeline.parameters.ubuntu-2004-docker-image >>
    environment:
      EVM: constantinople
      SOLTEST_FLAGS: --enforce-via-yul
      OPTIMIZE: 0
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run: *run_soltest
      - store_test_results: *store_test_results
      - store_artifacts: *artifacts_test_results


  t_ubu_clang_soltest: &t_ubu_clang_soltest
    <<: *test_ubuntu2004_clang
    environment:
      EVM: constantinople
      OPTIMIZE: 0

  t_ubu_release_soltest: &t_ubu_release_soltest
    <<: *t_ubu_soltest

  t_ubu_cli: &t_ubu_cli
    docker:
      - image: << pipeline.parameters.ubuntu-2004-docker-image >>
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run: *run_cmdline_tests
      - store_test_results: *store_test_results
      - store_artifacts: *artifacts_test_results

  t_ubu_release_cli: &t_ubu_release_cli
    <<: *t_ubu_cli

  t_ubu_asan_cli:
    <<: *t_ubu_cli
    environment:
      TERM: xterm
      ASAN_OPTIONS: check_initialization_order=true:detect_stack_use_after_return=true:strict_init_order=true:strict_string_checks=true:detect_invalid_pointer_pairs=2
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run:
          <<: *run_cmdline_tests
      - store_test_results: *store_test_results
      - store_artifacts: *artifacts_test_results

  t_ubu_asan_constantinople:
    <<: *test_asan
    environment:
      EVM: constantinople
      OPTIMIZE: 0
      SOLTEST_FLAGS: --no-smt
      ASAN_OPTIONS: check_initialization_order=true:detect_stack_use_after_return=true:strict_init_order=true:strict_string_checks=true:detect_invalid_pointer_pairs=2

  t_ubu_asan_constantinople_clang:
    <<: *test_asan_clang
    environment:
      EVM: constantinople
      OPTIMIZE: 0
      SOLTEST_FLAGS: --no-smt
      ASAN_OPTIONS: check_initialization_order=true:detect_stack_use_after_return=true:strict_init_order=true:strict_string_checks=true:detect_invalid_pointer_pairs=2

  t_ems_solcjs:
    docker:
      - image: buildpack-deps:latest
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install test dependencies
          command: |
            apt-get update
            apt-get install -qqy --no-install-recommends nodejs npm cvc4
      - run:
          name: Test solcjs
          no_output_timeout: 30m
          command: |
            node --version
            npm --version
            test/externalTests/solc-js/solc-js.sh /tmp/workspace/soljson.js $(cat /tmp/workspace/version.txt)

  t_ems_compile_ext_gnosis:
    docker:
      - image: circleci/node:10
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: External GnosisSafe compilation
          command: |
            export COMPILE_ONLY=1
            test/externalTests/gnosis.sh /tmp/workspace/soljson.js || test/externalTests/gnosis.sh /tmp/workspace/soljson.js

  t_ems_test_ext_gnosis:
    docker:
      - image: circleci/node:10
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: External GnosisSafe tests
          command: |
            test/externalTests/gnosis.sh /tmp/workspace/soljson.js || test/externalTests/gnosis.sh /tmp/workspace/soljson.js
      - run: *gitter_notify_failure
      - run: *gitter_notify_success

  t_ems_compile_ext_zeppelin:
    docker:
      - image: circleci/node:10
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: External Zeppelin compilation
          command: |
            export COMPILE_ONLY=1
            test/externalTests/zeppelin.sh /tmp/workspace/soljson.js || test/externalTests/zeppelin.sh /tmp/workspace/soljson.js

  t_ems_test_ext_zeppelin:
    docker:
      - image: circleci/node:10
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: External Zeppelin tests
          command: |
            test/externalTests/zeppelin.sh /tmp/workspace/soljson.js || test/externalTests/zeppelin.sh /tmp/workspace/soljson.js
      - run: *gitter_notify_failure
      - run: *gitter_notify_success

  t_ems_compile_ext_colony:
    docker:
      - image: circleci/node:10
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install test dependencies
          command: |
            sudo apt-get -qy install lsof
      - run:
          name: External ColonyNetworks compilation
          command: |
            export COMPILE_ONLY=1
            test/externalTests/colony.sh /tmp/workspace/soljson.js || test/externalTests/colony.sh /tmp/workspace/soljson.js

  t_ems_test_ext_colony:
    docker:
      - image: circleci/node:10
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install test dependencies
          command: |
            sudo apt-get -qy install lsof
      - run:
          name: External ColonyNetworks tests
          command: |
            test/externalTests/colony.sh /tmp/workspace/soljson.js || test/externalTests/colony.sh /tmp/workspace/soljson.js
      - run: *gitter_notify_failure
      - run: *gitter_notify_success

workflows:
  version: 2

  main:
    jobs:
      # basic checks
      - chk_spelling: *workflow_trigger_on_tags
      - chk_coding_style: *workflow_trigger_on_tags
      # DISABLED FOR 0.6.0 - chk_docs_examples: *workflow_trigger_on_tags
      - chk_buglist: *workflow_trigger_on_tags
      - chk_proofs: *workflow_trigger_on_tags
      - chk_pylint: *workflow_trigger_on_tags
      - chk_errorcodes: *workflow_trigger_on_tags
      - chk_antlr_grammar: *workflow_trigger_on_tags
      - chk_docs_pragma_min_version: *workflow_trigger_on_tags

      # build-only
      - b_docs: *workflow_trigger_on_tags
      - b_ubu_cxx20: *workflow_trigger_on_tags
      - b_ubu_ossfuzz: *workflow_trigger_on_tags

      # OS/X build and tests
      - b_osx: *workflow_trigger_on_tags
      - t_osx_cli: *workflow_osx
      - t_osx_soltest: *workflow_osx

      # ArchLinux build and tests
      - b_archlinux: *workflow_trigger_on_tags
      - t_archlinux_soltest: *workflow_archlinux

      # Ubuntu build and tests
      - b_ubu: *workflow_trigger_on_tags
      - b_ubu18: *workflow_trigger_on_tags
      - t_ubu_cli: *workflow_ubuntu2004
      - t_ubu_soltest: *workflow_ubuntu2004
      - t_ubu_soltest_enforce_yul: *workflow_ubuntu2004
      - b_ubu_clang: *workflow_trigger_on_tags
      - t_ubu_clang_soltest: *workflow_ubuntu2004_clang

      # Ubuntu fake release build and tests
      - b_ubu_release: *workflow_trigger_on_tags
      - t_ubu_release_cli: *workflow_ubuntu2004_release
      - t_ubu_release_soltest: *workflow_ubuntu2004_release

      # Emscripten build and selected tests
      - b_ems: *workflow_trigger_on_tags
      - t_ems_solcjs: *workflow_emscripten
      - t_ems_compile_ext_colony: *workflow_emscripten
      - t_ems_compile_ext_gnosis: *workflow_emscripten
      - t_ems_compile_ext_zeppelin: *workflow_emscripten

  nightly:

    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - develop
                - develop_060

    jobs:
      # OSSFUZZ builds and (regression) tests
      - b_ubu_ossfuzz: *workflow_trigger_on_tags
      - t_ubu_ossfuzz: *workflow_ubuntu1604_ossfuzz

      # Code Coverage enabled build and tests
      - b_ubu_codecov: *workflow_trigger_on_tags
      - t_ubu_codecov: *workflow_ubuntu2004_codecov

      # ASan build and tests
      - b_ubu_asan: *workflow_trigger_on_tags
      - b_ubu_asan_clang: *workflow_trigger_on_tags
      - t_ubu_asan_constantinople: *workflow_ubuntu2004_asan
      - t_ubu_asan_constantinople_clang: *workflow_ubuntu2004_asan_clang
      - t_ubu_asan_cli: *workflow_ubuntu2004_asan
