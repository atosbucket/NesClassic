" address(this).balance "
" block.coinbase "
" block.difficulty "
" block.gaslimit "
" block.number "
" block.timestamp "
" days "
" ether "
" gasleft() "
" gwei "
" hours "
" is "
" minutes "
" msg.data "
" msg.gas "
" msg.sender "
" msg.sig "
" msg.value "
" now "
" seconds "
" tx.gasprice "
" tx.origin "
" weeks "
" wei "
" years "
"!="
"%"
"&"
"("
")"
"*"
"**"
"+"
"++"
"-"
"--"
".balance"
".call("
".callcode("
".creationCode"
".delegatecall("
".gas("
".kill("
".length"
".pop();"
".push("
".runtimeCode"
".send("
".shutdown("
".staticcall("
".transfer("
".value"
"/"
"// compileViaYul: false"
"// compileViaYul: true"
"// optimize: false"
"// optimize: true"
"//"
"0**0"
"1.1"
"2e10"
":="
";"
"<"
"<<"
"<="
"=="
"===="
"====Source:"
">"
">="
">>"
"[a, b, c]"
"\\udead"
"\\xff"
"^"
"a[1:2]"
"abi.encode("
"abi.encodePacked("
"abi.encodeWithSelector("
"abi.encodeWithSignature("
"add("
"addmod("
"address(this).call("
"address(this).callcode("
"address(this).delegatecall("
"address(this).send("
"address(this).transfer("
"anonymous"
"assembly { "
"assert("
"block.blockhash("
"bool "
"break;"
"byte "
"bytes("
"bytes1 "
"bytes10 "
"bytes11 "
"bytes12 "
"bytes13 "
"bytes14 "
"bytes15 "
"bytes16 "
"bytes17 "
"bytes18 "
"bytes19 "
"bytes2 "
"bytes20 "
"bytes21 "
"bytes22 "
"bytes23 "
"bytes24 "
"bytes25 "
"bytes26 "
"bytes27 "
"bytes28 "
"bytes29 "
"bytes3 "
"bytes30 "
"bytes32 "
"bytes4 "
"bytes5 "
"bytes6 "
"bytes7 "
"bytes8 "
"bytes9 "
"catch (bytes memory ) {}"
"catch Error() {}"
"constant "
"constructor() "
"continue;"
"contract "
"delete "
"do "
"ecrecover("
"else "
"emit a("
"enum B { "
"event e("
"external "
"fallback() "
"false "
"fixed "
"fixed128x128 "
"for (a=0;a<2;a++) "
"function bid() public payable { "
"hex\"001122FF\""
"if "
"int "
"int x = -2**255;"
"int256 "
"int8 "
"interface i { "
"internal "
"is "
"keccak256("
"keccak256.gas("
"keccak256.value("
"leave"
"let x := "
"library l { "
"log0("
"log1("
"log2("
"log3("
"log4("
"mapping("
"memory m = "
"modifier onlySeller() { "
"mulmod("
"new "
"override"
"payable "
"pragma experimental ABIEncoderV2;"
"pragma experimental SMTChecker;"
"pragma solidity >=0.4.0;"
"pragma solidity ^90.90.0"
"public "
"pure "
"receive() "
"require("
"require(msg.sender == 0,\"\""
"return "
"returns ("
"revert("
"ripemd160("
"ripemd160.gas("
"ripemd160.value("
"self"
"selfdestruct("
"sha256("
"sha256.gas("
"sha256.value("
"sha3("
"storage sto = "
"string memory str = "
"string storage str = "
"struct V { "
"suicide("
"super "
"switch "
"this"
"throw "
"true "
"try "
"type("
"ufixed "
"ufixed128x128 "
"uint "
"uint256 "
"uint8 "
"uint[] "
"uint[][5] "
"using "
"var "
"view "
"virtual"
"while "
"x % y"
"x * 2**y"
"x / 2**y"
"x << y"
"{ uint x; }"
"{"
"{salt: "salt", value: 10}"
"{value: 1, gas: 2}"
"|"
"}"
"~"
