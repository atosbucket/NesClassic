
======= evm_to_wasm_output_selection_ewasm_only/input.yul (Ewasm) =======

Text representation:
(module
    (import "ethereum" "storageStore" (func $eth.storageStore (param i32 i32)))
    (memory $memory (export "memory") 1)
    (export "main" (func $main))

(func $main
    (local $hi i64)
    (local $y i64)
    (local $hi_1 i64)
    (block $label_
        (local.set $hi (i64.shl (i64.extend_i32_u (call $bswap32 (i32.wrap_i64 (i64.const 0)))) (i64.const 32)))
        (local.set $y (i64.or (local.get $hi) (i64.extend_i32_u (call $bswap32 (i32.wrap_i64 (i64.shr_u (i64.const 0) (i64.const 32)))))))
        (i64.store (i32.const 0) (local.get $y))
        (i64.store (i32.add (i32.const 0) (i32.const 8)) (local.get $y))
        (i64.store (i32.add (i32.const 0) (i32.const 16)) (local.get $y))
        (i64.store (i32.add (i32.const 0) (i32.const 24)) (local.get $y))
        (i64.store (i32.const 32) (local.get $y))
        (i64.store (i32.add (i32.const 32) (i32.const 8)) (local.get $y))
        (i64.store (i32.add (i32.const 32) (i32.const 16)) (local.get $y))
        (local.set $hi_1 (i64.shl (i64.extend_i32_u (call $bswap32 (i32.wrap_i64 (i64.const 42)))) (i64.const 32)))
        (i64.store (i32.add (i32.const 32) (i32.const 24)) (i64.or (local.get $hi_1) (i64.extend_i32_u (call $bswap32 (i32.wrap_i64 (i64.shr_u (i64.const 42) (i64.const 32)))))))
        (call $eth.storageStore (i32.const 0) (i32.const 32))
    )
)

(func $bswap16
    (param $x i32)
    (result i32)
    (local $y i32)
    (block $label__1
        (local.set $y (i32.or (i32.and (i32.shl (local.get $x) (i32.const 8)) (i32.const 65280)) (i32.and (i32.shr_u (local.get $x) (i32.const 8)) (i32.const 255))))

    )
    (local.get $y)
)

(func $bswap32
    (param $x i32)
    (result i32)
    (local $y i32)
    (local $hi i32)
    (block $label__2
        (local.set $hi (i32.shl (call $bswap16 (local.get $x)) (i32.const 16)))
        (local.set $y (i32.or (local.get $hi) (call $bswap16 (i32.shr_u (local.get $x) (i32.const 16)))))

    )
    (local.get $y)
)

)
