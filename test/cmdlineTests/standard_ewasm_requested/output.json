{"contracts":{"A":{"C":{"ewasm":{"wasm":"<BYTECODE REMOVED>","wast":"(module
    ;; custom section for sub-module
    ;; The Keccak-256 hash of the text representation of <REMOVED>
    ;; (@custom \"C_3_deployed\" \"<BYTECODE REMOVED>\")
    (import \"ethereum\" \"codeCopy\" (func $eth.codeCopy (param i32 i32 i32)))
    (import \"ethereum\" \"revert\" (func $eth.revert (param i32 i32)))
    (import \"ethereum\" \"getCallValue\" (func $eth.getCallValue (param i32)))
    (import \"ethereum\" \"finish\" (func $eth.finish (param i32 i32)))
    (memory $memory (export \"memory\") 1)
    (export \"main\" (func $main))

(func $main
    (local $p i32)
    (local $r i32)
    (local $hi i64)
    (local $y i64)
    (local $z3 i64)
    (local $_1 i64)
    (block $label_
        (local.set $p (call $u256_to_i32_716))
        (local.set $r (i32.add (local.get $p) (i32.const 64)))
        (if (i32.lt_u (local.get $r) (local.get $p)) (then
            (unreachable)))
        (local.set $hi (i64.shl (i64.extend_i32_u (call $bswap32 (i32.wrap_i64 (i64.const 0)))) (i64.const 32)))
        (local.set $y (i64.or (local.get $hi) (i64.extend_i32_u (call $bswap32 (i32.wrap_i64 (i64.shr_u (i64.const 0) (i64.const 32)))))))
        (i64.store (local.get $r) (local.get $y))
        (i64.store (i32.add (local.get $r) (i32.const 8)) (local.get $y))
        (i64.store (i32.add (local.get $r) (i32.const 16)) (local.get $y))
        (i64.store (i32.add (local.get $r) (i32.const 24)) (call $bswap64))
        (call $eth.getCallValue (i32.const 0))
        (local.set $z3 (i64.load (i32.const 8)))
        (if (i32.eqz (i64.eqz (i64.or (i64.or (i64.const 0) (i64.const 0)) (i64.or (local.get $z3) (i64.load (i32.const 0)))))) (then
            (call $eth.revert (call $to_internal_i32ptr_334) (call $u256_to_i32_333))))
        (local.set $_1 (datasize \"C_3_deployed\"))
        (call $eth.codeCopy (call $to_internal_i32ptr) (call $u256_to_i32 (dataoffset \"C_3_deployed\")) (call $u256_to_i32 (local.get $_1)))
        (call $eth.finish (call $to_internal_i32ptr) (call $u256_to_i32 (local.get $_1)))
    )
)

(func $u256_to_i32_333
    (result i32)
    (local $v i32)
    (local $_1 i64)
    (block $label__1
        (local.set $_1 (i64.const 0))
        (if (i64.ne (local.get $_1) (i64.or (i64.or (local.get $_1) (local.get $_1)) (local.get $_1))) (then
            (unreachable)))
        (if (i64.ne (local.get $_1) (i64.shr_u (local.get $_1) (i64.const 32))) (then
            (unreachable)))
        (local.set $v (i32.wrap_i64 (local.get $_1)))

    )
    (local.get $v)
)

(func $u256_to_i32
    (param $x4 i64)
    (result i32)
    (local $v i32)
    (block $label__2
        (if (i64.ne (i64.const 0) (i64.or (i64.or (i64.const 0) (i64.const 0)) (i64.const 0))) (then
            (unreachable)))
        (if (i64.ne (i64.const 0) (i64.shr_u (local.get $x4) (i64.const 32))) (then
            (unreachable)))
        (local.set $v (i32.wrap_i64 (local.get $x4)))

    )
    (local.get $v)
)

(func $u256_to_i32_716
    (result i32)
    (local $v i32)
    (block $label__3
        (if (i64.ne (i64.const 0) (i64.or (i64.or (i64.const 0) (i64.const 0)) (i64.const 0))) (then
            (unreachable)))
        (if (i64.ne (i64.const 0) (i64.shr_u (i64.const 64) (i64.const 32))) (then
            (unreachable)))
        (local.set $v (i32.wrap_i64 (i64.const 64)))

    )
    (local.get $v)
)

(func $to_internal_i32ptr_334
    (result i32)
    (local $r i32)
    (local $p i32)
    (block $label__4
        (local.set $p (call $u256_to_i32_333))
        (local.set $r (i32.add (local.get $p) (i32.const 64)))
        (if (i32.lt_u (local.get $r) (local.get $p)) (then
            (unreachable)))

    )
    (local.get $r)
)

(func $to_internal_i32ptr
    (result i32)
    (local $r i32)
    (local $v i32)
    (block $label__5
        (if (i64.ne (i64.const 0) (i64.or (i64.or (i64.const 0) (i64.const 0)) (i64.const 0))) (then
            (unreachable)))
        (if (i64.ne (i64.const 0) (i64.shr_u (i64.const 128) (i64.const 32))) (then
            (unreachable)))
        (local.set $v (i32.wrap_i64 (i64.const 128)))
        (local.set $r (i32.add (local.get $v) (i32.const 64)))
        (if (i32.lt_u (local.get $r) (local.get $v)) (then
            (unreachable)))

    )
    (local.get $r)
)

(func $bswap16
    (param $x i32)
    (result i32)
    (local $y i32)
    (block $label__6
        (local.set $y (i32.or (i32.and (i32.shl (local.get $x) (i32.const 8)) (i32.const 65280)) (i32.and (i32.shr_u (local.get $x) (i32.const 8)) (i32.const 255))))

    )
    (local.get $y)
)

(func $bswap32
    (param $x i32)
    (result i32)
    (local $y i32)
    (local $hi i32)
    (block $label__7
        (local.set $hi (i32.shl (call $bswap16 (local.get $x)) (i32.const 16)))
        (local.set $y (i32.or (local.get $hi) (call $bswap16 (i32.shr_u (local.get $x) (i32.const 16)))))

    )
    (local.get $y)
)

(func $bswap64
    (result i64)
    (local $y i64)
    (local $hi i64)
    (block $label__8
        (local.set $hi (i64.shl (i64.extend_i32_u (call $bswap32 (i32.wrap_i64 (i64.const 128)))) (i64.const 32)))
        (local.set $y (i64.or (local.get $hi) (i64.extend_i32_u (call $bswap32 (i32.wrap_i64 (i64.shr_u (i64.const 128) (i64.const 32)))))))

    )
    (local.get $y)
)

)
"}}}},"sources":{"A":{"id":0}}}
