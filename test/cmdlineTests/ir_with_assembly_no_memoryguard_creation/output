Optimized IR:
/*=====================================================*
 *                       WARNING                       *
 *  Solidity to Yul compilation is still EXPERIMENTAL  *
 *       It can result in LOSS OF FUNDS or worse       *
 *                !USE AT YOUR OWN RISK!               *
 *=====================================================*/

/// @use-src 0:"ir_with_assembly_no_memoryguard_creation/input.sol"
object "D_12" {
    code {
        {
            /// @src 0:82:175  "contract D {..."
            mstore(64, 128)
            if callvalue() { revert(0, 0) }
            /// @src 0:115:139  "assembly { mstore(0,0) }"
            mstore(0, 0)
            /// @src 0:82:175  "contract D {..."
            let _1 := datasize("D_12_deployed")
            codecopy(128, dataoffset("D_12_deployed"), _1)
            return(128, _1)
        }
    }
    /// @use-src 0:"ir_with_assembly_no_memoryguard_creation/input.sol"
    object "D_12_deployed" {
        code {
            {
                /// @src 0:82:175  "contract D {..."
                let _1 := memoryguard(0x80)
                mstore(64, _1)
                if iszero(lt(calldatasize(), 4))
                {
                    let _2 := 0
                    if eq(0x26121ff0, shr(224, calldataload(_2)))
                    {
                        if callvalue() { revert(_2, _2) }
                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }
                        return(_1, _2)
                    }
                }
                revert(0, 0)
            }
        }
        data ".metadata" hex"<BYTECODE REMOVED>"
    }
}
