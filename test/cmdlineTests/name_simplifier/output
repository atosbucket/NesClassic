Optimized IR:
/*******************************************************
 *                       WARNING                       *
 *  Solidity to Yul compilation is still EXPERIMENTAL  *
 *       It can result in LOSS OF FUNDS or worse       *
 *                !USE AT YOUR OWN RISK!               *
 *******************************************************/

object "C_59" {
    code {
        {
            mstore(64, 128)
            if callvalue() { revert(0, 0) }
            let _1 := datasize("C_59_deployed")
            codecopy(0, dataoffset("C_59_deployed"), _1)
            return(0, _1)
        }
    }
    object "C_59_deployed" {
        code {
            {
                mstore(64, 128)
                if iszero(lt(calldatasize(), 4))
                {
                    let _1 := 0
                    if eq(0xf8eddcc6, shr(224, calldataload(_1)))
                    {
                        if callvalue() { revert(_1, _1) }
                        let _2 := 32
                        if slt(add(calldatasize(), not(3)), _2) { revert(_1, _1) }
                        let offset := calldataload(4)
                        let _3 := 0xffffffffffffffff
                        if gt(offset, _3) { revert(_1, _1) }
                        if iszero(slt(add(offset, 35), calldatasize())) { revert(_1, _1) }
                        let _4 := calldataload(add(4, offset))
                        if gt(_4, _3) { panic_error_0x41() }
                        let _5 := shl(5, _4)
                        let dst := allocate_memory(add(_5, _2))
                        let dst_1 := dst
                        mstore(dst, _4)
                        dst := add(dst, _2)
                        let src := add(offset, 36)
                        if gt(add(add(offset, _5), 36), calldatasize()) { revert(_1, _1) }
                        let i := _1
                        for { } lt(i, _4) { i := add(i, 1) }
                        {
                            if slt(sub(calldatasize(), src), _2) { revert(_1, _1) }
                            let value := allocate_memory(_2)
                            mstore(value, calldataload(src))
                            mstore(dst, value)
                            dst := add(dst, _2)
                            src := add(src, _2)
                        }
                        let ret, ret_1 := fun_sumArray(dst_1)
                        let memPos := allocate_memory(_1)
                        return(memPos, sub(abi_encode_uint256_string(memPos, ret, ret_1), memPos))
                    }
                }
                revert(0, 0)
            }
            function abi_encode_uint256_string(headStart, value0, value1) -> tail
            {
                mstore(headStart, value0)
                let _1 := 32
                mstore(add(headStart, _1), 64)
                let length := mload(value1)
                mstore(add(headStart, 64), length)
                let i := tail
                for { } lt(i, length) { i := add(i, _1) }
                {
                    mstore(add(add(headStart, i), 96), mload(add(add(value1, i), _1)))
                }
                if gt(i, length)
                {
                    mstore(add(add(headStart, length), 96), tail)
                }
                tail := add(add(headStart, and(add(length, 31), not(31))), 96)
            }
            function allocate_memory(size) -> memPtr
            {
                memPtr := mload(64)
                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))
                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }
                mstore(64, newFreePtr)
            }
            function copy_literal_to_memory_64902fd228f7ef267f3b474dd6ef84bae434cf5546eee948e7ca26df3eda1927() -> memPtr
            {
                let memPtr_1 := allocate_memory(160)
                mstore(memPtr_1, 100)
                memPtr := memPtr_1
                mstore(add(memPtr_1, 0x20), "longstringlongstringlongstringlo")
                mstore(add(memPtr_1, 64), "ngstringlongstringlongstringlong")
                mstore(add(memPtr_1, 96), "stringlongstringlongstringlongst")
                mstore(add(memPtr_1, 128), "ring")
            }
            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value
            {
                value := shr(shl(3, offset), slot_value)
            }
            function fun_sumArray(var_s_mpos) -> var, var_mpos
            {
                if iszero(lt(var_mpos, mload(var_s_mpos))) { panic_error_0x32() }
                let _1 := mload(mload(add(add(var_s_mpos, shl(5, var_mpos)), 32)))
                let _2, _3 := storage_array_index_access_struct_S(var_mpos, var_mpos)
                sstore(_2, _1)
                if iszero(lt(0x01, mload(var_s_mpos))) { panic_error_0x32() }
                let _4 := mload(mload(add(var_s_mpos, 64)))
                if iszero(lt(var_mpos, 0x02)) { panic_error_0x32() }
                let slot := add(0x02, var_mpos)
                let _5 := sload(slot)
                let shiftBits := shl(3, var_mpos)
                let mask := shl(shiftBits, not(0))
                sstore(slot, or(and(_5, not(mask)), and(shl(shiftBits, _4), mask)))
                let _6, _7 := storage_array_index_access_struct_S(0x02, var_mpos)
                var := extract_from_storage_value_dynamict_uint256(sload(_6), _7)
                var_mpos := copy_literal_to_memory_64902fd228f7ef267f3b474dd6ef84bae434cf5546eee948e7ca26df3eda1927()
            }
            function panic_error_0x32()
            {
                mstore(0, shl(224, 0x4e487b71))
                mstore(4, 0x32)
                revert(0, 0x24)
            }
            function panic_error_0x41()
            {
                mstore(0, shl(224, 0x4e487b71))
                mstore(4, 0x41)
                revert(0, 0x24)
            }
            function storage_array_index_access_struct_S(array, index) -> slot, offset
            {
                if iszero(lt(index, 0x02)) { panic_error_0x32() }
                slot := add(array, index)
                offset := offset
            }
        }
    }
}
