Optimized IR:
/*=====================================================*
 *                       WARNING                       *
 *  Solidity to Yul compilation is still EXPERIMENTAL  *
 *       It can result in LOSS OF FUNDS or worse       *
 *                !USE AT YOUR OWN RISK!               *
 *=====================================================*/

/// @use-src 0:"optimizer_array_sload/input.sol"
object "Arraysum_34" {
    code {
        {
            /// @src 0:80:429  "contract Arraysum {..."
            mstore(64, 128)
            if callvalue() { revert(0, 0) }
            let _1 := datasize("Arraysum_34_deployed")
            codecopy(128, dataoffset("Arraysum_34_deployed"), _1)
            return(128, _1)
        }
    }
    /// @use-src 0:"optimizer_array_sload/input.sol"
    object "Arraysum_34_deployed" {
        code {
            {
                /// @src 0:80:429  "contract Arraysum {..."
                mstore(64, 128)
                if iszero(lt(calldatasize(), 4))
                {
                    let _1 := 0
                    if eq(0x81d73423, shr(224, calldataload(_1)))
                    {
                        if callvalue() { revert(_1, _1) }
                        if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }
                        let var_sum := _1
                        /// @src 0:368:378  "uint i = 0"
                        let var_i := /** @src 0:80:429  "contract Arraysum {..." */ _1
                        let _2 := sload(_1)
                        /// @src 0:364:423  "for(uint i = 0; i < values.length; i++)..."
                        for { }
                        /** @src 0:380:397  "i < values.length" */ lt(var_i, _2)
                        /// @src 0:368:378  "uint i = 0"
                        {
                            /// @src 0:80:429  "contract Arraysum {..."
                            if eq(var_i, not(0)) { panic_error_0x11() }
                            /// @src 0:399:402  "i++"
                            var_i := /** @src 0:80:429  "contract Arraysum {..." */ add(var_i, 1)
                        }
                        /// @src 0:399:402  "i++"
                        {
                            /// @src 0:80:429  "contract Arraysum {..."
                            mstore(_1, _1)
                            let _3 := sload(add(18569430475105882587588266137607568536673111973893317399460219858819262702947, var_i))
                            if gt(var_sum, not(_3)) { panic_error_0x11() }
                            /// @src 0:407:423  "sum += values[i]"
                            var_sum := /** @src 0:80:429  "contract Arraysum {..." */ add(var_sum, _3)
                        }
                        let memPos := mload(64)
                        return(memPos, sub(abi_encode_uint256(memPos, var_sum), memPos))
                    }
                }
                revert(0, 0)
            }
            function abi_encode_uint256(headStart, value0) -> tail
            {
                tail := add(headStart, 32)
                mstore(headStart, value0)
            }
            function panic_error_0x11()
            {
                mstore(0, shl(224, 0x4e487b71))
                mstore(4, 0x11)
                revert(0, 0x24)
            }
        }
        data ".metadata" hex"<BYTECODE REMOVED>"
    }
}
