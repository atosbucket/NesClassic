{"contracts":{"A":{"C":{"ir":"
/// @use-src 0:\"A\"
object \"C_11\" {
    code {
        /// @src 0:78:158  \"contract C { function f() external pure returns (bytes32) { return \\\"abcabc\\\"; } }\"
        mstore(64, memoryguard(128))
        if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }

        constructor_C_11()

        let _1 := allocate_unbounded()
        codecopy(_1, dataoffset(\"C_11_deployed\"), datasize(\"C_11_deployed\"))

        return(_1, datasize(\"C_11_deployed\"))

        function allocate_unbounded() -> memPtr {
            memPtr := mload(64)
        }

        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
            revert(0, 0)
        }

        /// @src 0:78:158  \"contract C { function f() external pure returns (bytes32) { return \\\"abcabc\\\"; } }\"
        function constructor_C_11() {

            /// @src 0:78:158  \"contract C { function f() external pure returns (bytes32) { return \\\"abcabc\\\"; } }\"

        }
        /// @src 0:78:158  \"contract C { function f() external pure returns (bytes32) { return \\\"abcabc\\\"; } }\"

    }
    /// @use-src 0:\"A\"
    object \"C_11_deployed\" {
        code {
            /// @src 0:78:158  \"contract C { function f() external pure returns (bytes32) { return \\\"abcabc\\\"; } }\"
            mstore(64, memoryguard(128))

            if iszero(lt(calldatasize(), 4))
            {
                let selector := shift_right_224_unsigned(calldataload(0))
                switch selector

                case 0x26121ff0
                {
                    // f()

                    external_fun_f_10()
                }

                default {}
            }

            revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() {
                revert(0, 0)
            }

            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {
                revert(0, 0)
            }

            function abi_decode_tuple_(headStart, dataEnd)   {
                if slt(sub(dataEnd, headStart), 0) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }

            }

            function cleanup_t_bytes32(value) -> cleaned {
                cleaned := value
            }

            function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {
                mstore(pos, cleanup_t_bytes32(value))
            }

            function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))

            }

            function external_fun_f_10() {

                if callvalue() { revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb() }
                abi_decode_tuple_(4, calldatasize())
                let ret_0 :=  fun_f_10()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack(memPos , ret_0)
                return(memPos, sub(memEnd, memPos))

            }

            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74() {
                revert(0, 0)
            }

            function zero_value_for_split_t_bytes32() -> ret {
                ret := 0
            }

            function convert_t_stringliteral_9f0adad0a59b05d2e04a1373342b10b9eb16c57c164c8a3bfcbf46dccee39a21_to_t_bytes32() -> converted {
                converted := 0x6162636162630000000000000000000000000000000000000000000000000000
            }

            /// @ast-id 10
            /// @src 0:91:156  \"function f() external pure returns (bytes32) { return \\\"abcabc\\\"; }\"
            function fun_f_10() -> var__5 {
                /// @src 0:127:134  \"bytes32\"
                let zero_t_bytes32_1 := zero_value_for_split_t_bytes32()
                var__5 := zero_t_bytes32_1

                /// @src 0:138:153  \"return \\\"abcabc\\\"\"
                var__5 := convert_t_stringliteral_9f0adad0a59b05d2e04a1373342b10b9eb16c57c164c8a3bfcbf46dccee39a21_to_t_bytes32()
                leave

            }
            /// @src 0:78:158  \"contract C { function f() external pure returns (bytes32) { return \\\"abcabc\\\"; } }\"

        }

        data \".metadata\" hex\"<BYTECODE REMOVED>\"
    }

}

"}}},"sources":{"A":{"id":0}}}
