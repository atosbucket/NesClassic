{"contracts":{"A":{"C":{"ir":"/*******************************************************
 *                       WARNING                       *
 *  Solidity to Yul compilation is still EXPERIMENTAL  *
 *       It can result in LOSS OF FUNDS or worse       *
 *                !USE AT YOUR OWN RISK!               *
 *******************************************************/


object \"C_11\" {
    code {
        mstore(64, 128)
        if callvalue() { revert(0, 0) }

        constructor_C_11()

        codecopy(0, dataoffset(\"C_11_deployed\"), datasize(\"C_11_deployed\"))

        return(0, datasize(\"C_11_deployed\"))

        function constructor_C_11() {

        }

    }
    object \"C_11_deployed\" {
        code {
            mstore(64, 128)

            if iszero(lt(calldatasize(), 4))
            {
                let selector := shift_right_224_unsigned(calldataload(0))
                switch selector

                case 0x26121ff0
                {
                    // f()

                    if callvalue() { revert(0, 0) }
                    abi_decode_tuple_(4, calldatasize())
                    let ret_0 :=  fun_f_10()
                    let memPos := allocate_unbounded()
                    let memEnd := abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack(memPos , ret_0)
                    return(memPos, sub(memEnd, memPos))
                }

                default {}
            }
            if iszero(calldatasize()) {  }
            revert(0, 0)

            function abi_decode_tuple_(headStart, dataEnd)   {
                if slt(sub(dataEnd, headStart), 0) { revert(0, 0) }

            }

            function abi_encode_t_bytes4_to_t_bytes4_fromStack(value, pos) {
                mstore(pos, cleanup_t_bytes4(value))
            }

            function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack(headStart , value0) -> tail {
                tail := add(headStart, 32)

                abi_encode_t_bytes4_to_t_bytes4_fromStack(value0,  add(headStart, 0))

            }

            function allocate_unbounded() -> memPtr {
                memPtr := mload(64)
            }

            function cleanup_t_bytes4(value) -> cleaned {
                cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)
            }

            function cleanup_t_rational_1633837924_by_1(value) -> cleaned {
                cleaned := value
            }

            function convert_t_rational_1633837924_by_1_to_t_bytes4(value) -> converted {
                converted := shift_left_224(cleanup_t_rational_1633837924_by_1(value))
            }

            function fun_f_10() -> var__5 {
                let zero_t_bytes4_1 := zero_value_for_split_t_bytes4()
                var__5 := zero_t_bytes4_1

                let expr_7 := 0x61626364
                var__5 := convert_t_rational_1633837924_by_1_to_t_bytes4(expr_7)
                leave

            }

            function shift_left_224(value) -> newValue {
                newValue :=

                shl(224, value)

            }

            function shift_right_224_unsigned(value) -> newValue {
                newValue :=

                shr(224, value)

            }

            function zero_value_for_split_t_bytes4() -> ret {
                ret := 0
            }

        }

    }

}

"}}},"sources":{"A":{"id":0}}}
